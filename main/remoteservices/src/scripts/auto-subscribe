#!/usr/bin/perl

# Copyright (C) 2012-2013 Zentyal S.L.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License, version 2, as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

use strict;
use warnings;

use EBox;
use EBox::Global;

# Core modules
use Error qw(:try);
use Sys::Hostname;

my ($username, $password, $name, $bundleId) = @ARGV;

unless ($username and $password) {
    print "Usage: $0 <username> <password> [servername [bundle_id]]\n";
    exit(1);
}

unless ($name) {
    $name = hostname();
}

EBox::init();

my $global = EBox::Global->getInstance();

importNetwork();

my $rs = $global->modInstance('remoteservices');
my $subscription = $rs->model('Subscription');

my @fields = (username => $username,
              password => $password,
              eboxCommonName => $name);

$subscription->set(@fields);

if ($subscription->showAvailable()) {
    if ($bundleId) {
        push( @fields, options => $bundleId );
        $subscription->reloadTable(); # To notice the change of field
        undef $subscription->{'fields'};
        $subscription->set(@fields);
    } else {
        print "You must provide bundle_id as you have more than one option available\n";
        exit(2);
    }
}

$global->saveAllModules();

sub importNetwork
{
    my $INTERFACES_FILE = '/etc/network/interfaces';
    my $RESOLV_FILE = '/etc/resolv.conf';
    my $DEFAULT_IFACE = 'eth0';
    my $DEFAULT_GW_NAME = 'default';
    my $DEFAULT_WEIGHT = 1;

    my $network = $global->modInstance('network');

    my @interfaces = @{$network->_readInterfaces()};
    foreach my $iface (@interfaces) {
        if ($iface->{'method'} eq 'static') {
            $network->setIfaceStatic($iface->{'name'}, $iface->{'address'},
                    $iface->{'netmask'}, undef, 1);
            if ($iface->{'gateway'}) {
                my $gwModel = $network->model('GatewayTable');
                my $defaultGwRow = $gwModel->find(name => $DEFAULT_GW_NAME);
                if ($defaultGwRow) {
                    EBox::info("Already a default gateway, keeping it");
                } else {
                    $gwModel->add(name      => $DEFAULT_GW_NAME,
                            ip        => $iface->{'gateway'},
                            interface => $iface->{'name'},
                            weight    => $DEFAULT_WEIGHT,
                            default   => 1);
                }
            }
        } elsif ($iface->{'method'} eq 'dhcp') {
            $network->setIfaceDHCP($iface->{'name'}, 0, 1);
        }
    }

    my ($searchdomain, @dns) = @{$network->_readResolv()};
    $network->setNameservers(@dns);
    if ($searchdomain) {
        $network->setSearchDomain($searchdomain);
    }
}

sub _readInterfaces
{
    my ($self) = @_;

    my $ifacesFH;
    unless (open($ifacesFH, $INTERFACES_FILE)) {
        die "couldn't open $INTERFACES_FILE";
    }

    my @interfaces;
    my $iface;
    my @fields = qw/address netmask gateway/;

    for my $line (<$ifacesFH>) {
        $line =~ s/^\s+//g;
        my @toks = split (/\s+/, $line);
        next unless @toks;
        if ($toks[0] eq 'iface' and $toks[2] eq 'inet') {
            next if ($self->_ignoreIface($toks[1]));
            push (@interfaces, $iface) if ($iface);
            $iface = {name   => $toks[1], method => $toks[3]};
        }

        if (grep((/^$toks[0]$/), @fields)) {
            $iface->{$toks[0]} = $toks[1];
        }
    }
    close ($ifacesFH);
    push (@interfaces, $iface) if ($iface);

    return \@interfaces;
}

sub _readResolv
{
    my $resolvFH;
    unless (open($resolvFH, $RESOLV_FILE)) {
        die "Couldn't open $RESOLV_FILE";
    }

    my $searchdomain = undef;
    my @dns;
    for my $line (<$resolvFH>) {
        $line =~ s/^\s+//g;
        my @toks = split (/\s+/, $line);
        if ($toks[0] eq 'nameserver') {
            push (@dns, $toks[1]);
        } elsif ($toks[0] eq 'search') {
            $searchdomain = $toks[1];
        }
    }
    close ($resolvFH);

    return [$searchdomain, @dns];
}

1;
