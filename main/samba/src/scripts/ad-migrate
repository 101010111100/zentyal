#!/usr/bin/perl

# Copyright (C) 2013 Zentyal S.L.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License, version 2, as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

use strict;
use warnings;

use EBox;
use EBox::Global;

use Pod::Usage;
use Getopt::Long;
use Filesys::SmbClient;
use Net::Ping;
use Net::DNS;
use Net::NTP;
use Net::LDAP;
use Net::LDAP::Util qw(ldap_explode_dn);
use Error qw(:try);

use Data::Dumper;

sub serverReachable
{
    my ($adServerIp) = @_;

    print "Checking if server '$adServerIp' is online...\n";
    my $pinger = new Net::Ping('tcp');
    $pinger->port_number(389);
    $pinger->service_check(1);
    my $reachable = $pinger->ping($adServerIp);
    $pinger->close();
    return $reachable;
}

sub resolve
{
    my ($adServerName) = @_;

    print "Resolving '$adServerName'...\n");
    my $addresses = [];
    my $resolver = new Net::DNS::Resolver(nameservers => ['127.0.0.1']);
    my $query = $resolver->query($adServerName, 'A');
    if ($query) {
        foreach my $rr ($query->answer()) {
            next unless $rr->type() eq 'A';
            push (@{$addresses}, $rr->address());
        }
    }
    return $addresses;
}


#    # Check users homes, abort if exists and tell to delete
#    my @homes;
#    my $zentyalUsers = $usersModule->users();
#    foreach my $user (@{$zentyalUsers}) {
#        my $home = '/home/' . $user->get('uid');
#        if (EBox::Sudo::fileTest('-d', $home)) {
#            push (@homes, $home);
#        }
#    }
#    my $ldap = new Net::LDAP($adData->{adServerIp});
#    my $ldapUser = $adData->{adUsername} . '@' . $adData->{adDomain};
#    my $ldapPwd  = $adData->{adPassword};
#    $ldap->bind($ldapUser, password => $ldapPwd);
#    my $adUsers = $ldap->search(base => $adData->{adDefaultNC},
#                                scope => 'sub',
#                                filter => '(objectClass=user)',
#                                attrs => ['samAccountName']);
#    foreach my $adUser ($adUsers->entries()) {
#        my $home = '/home/' . $adUser->get_value('samAccountName');
#        if (EBox::Sudo::fileTest('-d', $home)) {
#            push (@homes, $home);
#        }
#    }
#    if (scalar @homes) {
#        EBox::error("The following user's home directories exists. Please remove them before proceed.");
#        foreach my $home (@homes) {
#            EBox::error("    $home");
#        }
#        exit 1;
#    }

##
##  Add help option
##
my $parser = new Getopt::Long::Parser();
$parser->configure('auto_help');

##
##  Init Zentyal framework
##
EBox::initLogger('ad-migrate-log.conf');
EBox::init();

##
##  Warn and ask for confirmation
##
print "WARNING: This script will seize all domain roles from the current owners.\n";
print "         When required, shutdown all domain controllers except this one and never\n";
print "         turn them on again.\n\n";
print "Continue? (Y/n)\n";
my $answer = <STDIN>;
unless ($answer eq 'Y') {
    print "Aborted.\n";
    exit 0;
}

##
##  Instance modules
##
my $sambaModule = EBox::Global->modInstance('samba');

##
##  Check mode is ADC
##
my $mode = $sambaModule->mode();
unless ($mode eq 'adc') {
    print "ERROR: This server is not an additional domain controller.\n"
    exit 1;
}

##
##  Check server is joined to the domain
##
my $provision = $sambaModule->getProvision();
unless ($provision->isProvisioned()) {
    print "ERROR: Before running this script, the server must be joined to the domain.\n";
    print "       Configure the server as an 'Additional domain controller' in the Zentyal\n";
    print "       control panel, then run again.\n";
    exit 1;
}

##
##  Get the list of domain controllers running on this domain
##
my @domainControllers;
my $ldb = $sambaModule->ldb();
my $params = {
    base => 'OU=Domain Controllers,' . $ldb->dn(),
    scope => 'one',
    filter => '(objectClass=computer)',
    attrs => ['dnsHostName'],

};
my $result = $ldb->search($params);
foreach my $entry ($result->entries) {
    my $name = $entry->get_value('dnsHostName');
    my $addrs = resolve($name);
    my $dc = {
        dn   => $entry->dn(),
        name => $name,
        addr => $addrs,
    };
    push (@domainControllers, $dc);
}
print Dumper \@domainControllers;

##
##  Stop daemons
##
$sambaModule->stopService();

##
##  Transfer sysvol share
##
my $synchronizer = new EBox::Samba::SysvolSync();
$synchronizer->sync() or die $@;

##
##  Shutdown all domain controllers
##
my $allShutdown = 0;
while (not $allShutdown) {
    my $anyAlive = 0;
    foreach my $dc (@domainControllers) {
        if (reachable($dc->{name})) {
            $anyAlive = 1;
            next;
        }
    }
    $allShutdown = not $anyAlive;
}

##
##  STAGE III: Seize FSMO roles
##

print "Migrated successfully!\n";

=head1 NAME

ad-migrate - Take over AD domain and migrate it to Zentyal Server

=head1 SYNOPSIS

ad-migrate [options]

Options:

    --help              brief help message
    --ad-server-ip      IP address of the AD domain controller
    --ad-username       Domain administration account
    --ad-password       Password

=head1 OPTIONS

=over 8

=item B<-help>

Print a brief help message and exits.

=item B<-man>

Prints the manual page and exits.

=back

=head1 DESCRIPTION

B<This program> will read the given input file(s) and do something
useful with the contents thereof.

=cut
