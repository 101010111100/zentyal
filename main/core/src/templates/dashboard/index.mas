<%args>
    @dashboard1
    @dashboard2
    %toggled
    @brokenPackages
    $softwareInstalled => 0
    $message => undef
</%args>
<%init>
use utf8;
use EBox::Gettext;
</%init>
<script type="text/javascript" src="/data/js/jquery.js">//</script>
<script type="text/javascript" src="/data/js/jquery-ui.js">//</script>
<script type="text/javascript" src="/data/js/prototype.js">//</script>
<script type="text/javascript" src="/data/js/scriptaculous/scriptaculous.js">//</script>
<script type="text/javascript" async=false defer=false  src="/data/js/common.js">//</script>
<script type="text/javascript" async=false defer=false src="/data/js/dashboard.js">//</script>
<script type="text/javascript" src="/data/js/modalbox.js">//</script>
<script type="text/javascript" src="/data/js/modalbox-zentyal.js">//</script>
<script type="text/javascript" src="/data/js/table-helper.js">//</script>
<script type="text/javascript" src="/data/js/format.js">//</script>
<script type="text/javascript" src="/data/js/flotr.js">//</script>
<script type="text/javascript">
var status_str = {
    'running': {
        'text': '<% __("Running") %>',
        'tip': '<% __("The service is enabled and running") %>',
        'class': 'summaryRunning'
    },
    'stopped': {
        'text': '<% __("Stopped") %>',
        'tip': '<% __("The service is enabled, but not running") %>',
        'class': 'summaryStopped'
    },
    'unmanaged': {
        'text': '<% __("Running unmanaged") %>',
        'tip': '<% __("The service is running, but not enabled in Zentyal") %>',
        'class': 'summaryDisabled'
    },
    'disabled': {
        'text': '<% __("Disabled") %>',
        'tip': '<% __("The service is not enabled in Zentyal") %>',
        'class': 'summaryDisabled'
    }
};

var start = '<% __("Start") %>';
var restart = '<% __("Restart") %>';

function configureWidgets()
{
   Modalbox.show('/Dashboard/ConfigureWidgets', {
        title: '<% __("Configure Widgets") %>',
        width: 980,
        height: 100,
        overlayOpacity: 0,
        afterLoad: function() {
            $('MB_content').setStyle({overflow: 'visible'});
            Zentyal.Dashboard.toggleClose();
            Modalbox.MBwindow.removeClassName('MB_dialog');
        },
        beforeHide: function() {
            Zentyal.Dashboard.toggleClose();
        },
    });

}

var graphInfo = new Array();

//TT
function updateGraph(element,value) {
    var id = element.attr('id');
    var g = graphInfo[id];
    for(var i = 0; i < g.length-1; i++) {
        g[i] = [i, g[i+1][1]];
    }
    g[g.length-1] = [g.length-1, value];
    // XXX waiting for flotr migration
    Flotr.draw(
        $(id), [
        {
            data: g
        }],
        {
            xaxis: { noTicks: 0 },
            yaxis: { noTicks: 2, tickFormatter: getBytes },
        }
    );
}
//]]>
</script>
% if ($message) {
<div id="notification_container" class='tip'>
<span id="notification_text"><% $message->{text} %></span>
<a id="popx" onclick="Zentyal.Dashboard.closeNotification('<% $message->{name} %>'); return false">Ã—</a>
</div>
% }

<span id="confbutton">
<a href="#" onclick='configureWidgets(); return false;' ><% __('Configure widgets') %></a>
</span>
% if (@brokenPackages) {
<div class='error'>
    <% __x('The following packages are not properly installed: {packages}.',
           packages => join (' ', @brokenPackages)) %>
% if ($softwareInstalled) {
    <% __x('Go to {ohref}Software Management{chref} for more information.',
           ohref => '<a href="/Software/EBox/">', chref => '</a>') %>
% } else {
    <% __x('To solve this situation, please try to execute the following command in the console: {cmd}',
           cmd => '<b>sudo dpkg --configure -a</b>') %>
% }
</div>
% }
<div style='clear: right;'/>
<div class='dashboard' id="dashboard1">
<br/>
% foreach my $widget (@dashboard1) {
    <& dashboard/widget.mas, widget => $widget, toggled => \%toggled &>
% }
</div>
<div class='dashboard' id="dashboard2">
<br/>
% foreach my $widget (@dashboard2) {
    <& dashboard/widget.mas, widget => $widget, toggled => \%toggled &>
% }
</div>
<script type="text/javascript">

jQuery.noConflict();
//RR
function createDashboardSortable(id, containment)
{
  Sortable.create(id, {
    tag: "div",
    handle: "widgetHandle",
    dropOnEmpty: true,
    constraint: false,
    scroll: window,
    containment: containment,
    onUpdate: function() {
        new Ajax.Request("/Dashboard/Update", {
            method: "post",
            asynchronous: false,
            parameters: { dashboard: id, widgets: Sortable.sequence(id).join(',') }
        });
    }
  });
}

createDashboardSortable('dashboard1', ['dashboard1','dashboard2']);
createDashboardSortable('dashboard2', ['dashboard1','dashboard2']);


var statusInfo = [];

//TT
function equals(a,b)
{
    var p;
    for (p in a)
    {
        if (a[p] == null) {
           continue;
        }

        switch(typeof(a[p]))
        {
            case 'object':
                if (!a[p].equals(b[p])) { return false }; break;
            case 'function':
                if (typeof(b[p])=='undefined' || (p != 'equals' && a[p].toString() != b[p].toString())) { return false; }; break;
            default:
                if (a[p] != b[p]) { return false; }
        }
    }

    for (p in b)
    {
        if (a[p] == null) {
           continue;
        }
        if(typeof(a[p])=='undefined') {return false;}
    }

    return true;
}

//TT
function updateValue(element, item)
{
    if (item.value_type === 'ajax') {
        new Ajax.Request(item.ajax_url, {
            asynchronous: false,
            data: '',
            onSuccess: function(response) {
                item.value = response.responseJSON.value;
                element.removeClass().addClass('summary_value');
                element.addClass('summary_' + response.responseJSON.type);
            }
        });
    }

    console.log('updateValue for ' + item.ajax_url + ' = ' + item.value);
    if (element.html() != item.value) {
        element.html(item.value);
//XXX        element.effect('highlight');
    }
}

//TT
function updateStatus(element, item, itemname)
{
    var highlight = 1;
    if (statusInfo[itemname]) {
       if (equals(item,statusInfo[itemname])) {
           return;
       }
    } else {
       highlight = 0;
    }

    statusInfo[itemname] = item;
    var status;
    var button = restart;
    var name = 'restart';
    if (item.enabled && item.running) {
        status = 'running';
    } else if (item.enabled && !item.running) {
        status = 'stopped';
        button = start;
        name = 'start'
    } else if (!item.enabled && item.running) {
        status = 'unmanaged';
    } else {
        status = 'disabled';
    }
    var text;
    var tooltip;
    if (item.statusStr) {
        text = item.statusStr;
        tooltip = '';
    } else {
        text = status_str[status]['text'];
        tooltip = status_str[status]['tip'];
    }
    var new_text = "<span title='" + tooltip
        + "' class='sleft'>" + text
        + '</span>';
    if (item.enabled && !item.nobutton) {
        var restart_form = "\
 <form action='/SysInfo/RestartService'>\
<input type='hidden' name='module' value='" + item.module + "'/>\
<span class='sright'>\
<input class='inputButtonRestart' type='submit' name='" + name + "' value='"
 + button + "'/>\
</span>\
 </form>";
        new_text += restart_form;
    }
    element.html(new_text);
//    element.update(new_text);
    if (highlight) {
//       element.effect('highlight');
    }
}

//TT
function updateGraphRow(item, itemname) {
    for(var g = 0; g < item.graphs.length; g++) {
        var graphname = itemname + '_' + g;
        var graph = jQuery('#' + Zentyal.escapeSelector(graphname));
        console.log('updateGraphRow -> ' + graphname + '  ' + item.graphs[g].value);
        updateGraph(graph, item.graphs[g].value);
    }
}

//TT
function updateList(item, itemname) {
    var listname = itemname + '_table';
    var nonename = itemname + '_none';
    var list = jQuery('#' + Zentyal.escapeSelector(listname));
    var none = jQuery('#' + Zentyal.escapeSelector(nonename));
    if(item.ids.length == 0) {
        list.hide();
        none.show();
    } else {
        list.show();
        none.hide();
    }

    var listDOM = list.get(0);
    var rids = [];
    for (var r = 1; r < list.rows.length; r++) {
        var row = listDOM.rows[r];
        var id = row.attributes['id'].value;
        if(item.ids.indexOf(id) == -1) {
            row.remove();
            r--;
        } else {
            rids[r] = id;
        }
    }
    for (var i = 0; i < item.ids.length; i++) {
        var id = item.ids[i];
        if(rids.indexOf(id) == -1) {
            var row = listDOM.insertRow(i+1);
            row.setAttribute('id',id);
            var content = item.rows[id];
            for (var c = 0; c < content.length; c++) {
                var cell = row.insertCell(c);
                cell.innerHTML = content[c];
            }
//XXX            jQuery(row).visualEffect('highlight');
        }
    }
}


function updateWidget(widget) {
    if(widget == null) {
        return;
    }

    var widgetSelector = '#' + Zentyal.escapeSelector( widget.module + ":" + widget.name + '_content');
    var widgetcontents = jQuery(widgetSelector);


   //fade out no longer existent sections
   var currentSections = {};
   if(widget.sections) {
        jQuery.each(widget.sections, function(index, newsect) {
               var id = widget.module + ":" + widget.name + '_' + newsect.name + '_section';
               currentSections[id] = {};
        });
   }
   widgetcontents.children().each( function(index, oldsect) {
        if(!(oldsect.id in currentSections)) {
            oldsect = jQuery(oldsect);
            oldsect.fadeOut(500, function() {
                 oldsect.remove()
            });
        }
    });


    var prevsect = null;
    if (widget.sections) {
      for(var i = 0; i < widget.sections.length; i++) {
        var s = widget.sections[i];
        var sect = widget.module + ":" + widget.name + '_' + s.name;
        var sectname = sect + '_section';
        var cursect = jQuery('#' + Zentyal.escapeSelector(sectname));
        if(cursect.length === 0) {
            var newsection = document.createElement("div");
            newsection.id = sectname;
            if (prevsect === null) {
                 widgetcontents.prepend(newsection);
            } else {
                prevsect.after(newsection);
            }
            // FRO LATE
            var req = new Ajax.Updater(sectname, '/Dashboard/Section', {
                asynchronous: false,
                parameters: {

                    module: widget.module,
                    widget: widget.name,
                    section: s.name
                },
                onComplete: function(res) {
                     var element = newsection;
//XXX                     element.visualEffect('highlight');
//                    res.request.element.visualEffect('highlight');
                }
            });
//            req.element = newsection;
            prevsect = jQuery(newsection);
            continue;
            // END LATE
        } else {
            prevsect = cursect;
            s.items.each(function(item,i) {
                var itemname = sect + '_' + i;
                var element = jQuery('#' + Zentyal.escapeSelector(itemname));
                if(item.type == 'value') {
                    updateValue(element, item);
                } else if(item.type == 'status') {
                    updateStatus(element, item, itemname);
                } else if(item.type == 'graph') {
                    updateGraph(element, item.value);
                } else if(item.type == 'graphrow') {
                    updateGraphRow(item, itemname);
                } else if(item.type == 'list') {
                    updateList(item, itemname);
                }
            });
        }
    }
  }
}

//MM
function updateWidgets() {
    var widgets = Sortable.sequence("dashboard1").concat(Sortable.sequence("dashboard2"));
    widgets.each(function(w) {
        var parts = w.split(':');
        var url = '/Dashboard/WidgetJSON?module=' + parts[0] + '&widget=' +  parts[1];
        jQuery.ajax({
                         url:   url,
                         type: 'get',
                         dataType: 'json',
                         async: false,
                         success: function(data) {
                            console.log(url + ' = ' + data);
                            updateWidget(data);
                         }
                    });

//        new Ajax.Request(url, {
//            method: "get",
////            asynchronous: true,
//            asynchronous: false,
//            onSuccess: function(transport) {
//                console.log('Updated ' + url);
//                updateWidget(transport.responseJSON);
//            }
//        });
    });
};

jQuery( function () {

//      setInterval( Zentyal.Dashboard.updateWidgets, 30000);
      setInterval( updateWidgets, 30000);
});
</script>

%#<input type='button' value='DEBUG' onclick='Zentyal.Dashboard.updateWidgets();    alert("widgets update"); return false' />
<input type='button' value='DEBUG' onclick='updateWidgets();  return false' />

